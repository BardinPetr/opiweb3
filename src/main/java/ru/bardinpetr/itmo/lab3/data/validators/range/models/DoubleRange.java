// Generated by delombok at Thu May 09 13:42:06 MSK 2024
package ru.bardinpetr.itmo.lab3.data.validators.range.models;

import jakarta.validation.constraints.NotNull;
import java.io.Serializable;
import static ru.bardinpetr.itmo.lab3.data.validators.range.models.RangeType.INCLUSIVE;

public class DoubleRange implements Serializable {
    @NotNull
    private Double min;
    private RangeType minType = INCLUSIVE;
    @NotNull
    private Double max;
    private RangeType maxType = INCLUSIVE;

    @Override
    public String toString() {
        return "%s%.2f, %.2f%s".formatted(minType == INCLUSIVE ? "[" : "(", min, max, maxType == INCLUSIVE ? "]" : ")");
    }

    @java.lang.SuppressWarnings("all")
    public Double getMin() {
        return this.min;
    }

    @java.lang.SuppressWarnings("all")
    public RangeType getMinType() {
        return this.minType;
    }

    @java.lang.SuppressWarnings("all")
    public Double getMax() {
        return this.max;
    }

    @java.lang.SuppressWarnings("all")
    public RangeType getMaxType() {
        return this.maxType;
    }

    @java.lang.SuppressWarnings("all")
    public void setMin(final Double min) {
        this.min = min;
    }

    @java.lang.SuppressWarnings("all")
    public void setMinType(final RangeType minType) {
        this.minType = minType;
    }

    @java.lang.SuppressWarnings("all")
    public void setMax(final Double max) {
        this.max = max;
    }

    @java.lang.SuppressWarnings("all")
    public void setMaxType(final RangeType maxType) {
        this.maxType = maxType;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof DoubleRange)) return false;
        final DoubleRange other = (DoubleRange) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$min = this.getMin();
        final java.lang.Object other$min = other.getMin();
        if (this$min == null ? other$min != null : !this$min.equals(other$min)) return false;
        final java.lang.Object this$max = this.getMax();
        final java.lang.Object other$max = other.getMax();
        if (this$max == null ? other$max != null : !this$max.equals(other$max)) return false;
        final java.lang.Object this$minType = this.getMinType();
        final java.lang.Object other$minType = other.getMinType();
        if (this$minType == null ? other$minType != null : !this$minType.equals(other$minType)) return false;
        final java.lang.Object this$maxType = this.getMaxType();
        final java.lang.Object other$maxType = other.getMaxType();
        if (this$maxType == null ? other$maxType != null : !this$maxType.equals(other$maxType)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof DoubleRange;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $min = this.getMin();
        result = result * PRIME + ($min == null ? 43 : $min.hashCode());
        final java.lang.Object $max = this.getMax();
        result = result * PRIME + ($max == null ? 43 : $max.hashCode());
        final java.lang.Object $minType = this.getMinType();
        result = result * PRIME + ($minType == null ? 43 : $minType.hashCode());
        final java.lang.Object $maxType = this.getMaxType();
        result = result * PRIME + ($maxType == null ? 43 : $maxType.hashCode());
        return result;
    }

    @java.lang.SuppressWarnings("all")
    public DoubleRange() {
    }

    @java.lang.SuppressWarnings("all")
    public DoubleRange(final Double min, final RangeType minType, final Double max, final RangeType maxType) {
        this.min = min;
        this.minType = minType;
        this.max = max;
        this.maxType = maxType;
    }
}
