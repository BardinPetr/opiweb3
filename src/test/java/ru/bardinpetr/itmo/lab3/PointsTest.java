// Generated by delombok at Thu May 09 13:42:06 MSK 2024
package ru.bardinpetr.itmo.lab3;

import org.assertj.core.data.Offset;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import ru.bardinpetr.itmo.lab3.data.dao.impl.UserDAO;
import ru.bardinpetr.itmo.lab3.data.models.Point;
import ru.bardinpetr.itmo.lab3.data.models.PointResult;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.api.TestInstance;

import static org.assertj.core.api.Assertions.*;
import static ru.bardinpetr.itmo.lab3.MockFactory.createPointResult;
import static ru.bardinpetr.itmo.lab3.MockFactory.createUser;

import ru.bardinpetr.itmo.lab3.app.check.PointCheckPredicate;
import static org.junit.jupiter.api.Assertions.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class PointsTest {

    private PointCheckPredicate predicate;

    @BeforeAll
    void setupPredicate() {
        predicate = new PointCheckPredicate();
    }

    @Test
    void testPoint() {
        var p = Point.of(2.0, 5.0);
        p.setX(3.0);
        p.setY(4.0);
        var p2 = p.scale(3.0);

        assertThat(p2.getX()).isCloseTo(9.0, Offset.offset(1e-6));
        assertThat(p2.getY()).isCloseTo(12.0, Offset.offset(1e-6));
    }

    @ParameterizedTest
    @MethodSource
    void pointCheck_trueForInsidePoints(Point p) {
        assertTrue(predicate.test(p));
    }

    @ParameterizedTest
    @MethodSource
    void pointCheck_trueForCornerPoints(Point p) {
        assertTrue(predicate.test(p));
    }

    @ParameterizedTest
    @MethodSource
    void pointCheck_falseForOutsidePoints(Point p) {
        assertFalse(predicate.test(p));
    }

    private static Stream<Point> pointCheck_trueForInsidePoints() {
        return Stream.of(
                Point.of(0.0, 0.0),
                Point.of(0.5, 0.25),
                Point.of(-0.25, -0.25),
                Point.of(-0.25, 0.25)
        );
    }

    private static Stream<Point> pointCheck_trueForCornerPoints() {
        return Stream.of(
                Point.of(0.0, 0.0),
                Point.of(1.0, 0.0),
                Point.of(1.0, 0.5),
                Point.of(0.0, 0.5),
                Point.of(-1.0, 0.0),
                Point.of(-0.5, 0.0),
                Point.of(0.0, -0.5)
        );
    }

    private static Stream<Point> pointCheck_falseForOutsidePoints() {
        return Stream.of(
                Point.of(1.0, 1.0),
                Point.of(-1.0, -1.0),
                Point.of(1.0, -1.0),
                Point.of(-1.0, 1.0)
        );
    }
}
